#!/usr/bin/env python

import argparse
import datetime
import os
import time
import logging
import requests
import threading
import time

from dotenv import load_dotenv
from flask import Flask, request
from twilio.rest import Client
from twilio.twiml.messaging_response import MessagingResponse, Message

import RPi.GPIO as GPIO


log = logging.getLogger('doorpi')

load_dotenv()

TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_NUMBER = os.getenv("TWILIO_NUMBER")

REMINDER_HOUR = int(os.getenv("REMINDER_HOUR"))



class Doorpi:
    def __init__(self):
        GPIO.setmode(GPIO.BOARD)
        GPIO.setup(10, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
        GPIO.setup(11, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
        GPIO.setmode(GPIO.BOARD)
        GPIO.setup(7, GPIO.OUT)
        self.client = None
        self.last_status = self.get_garage_status()
        self.last_status_time = None
        self.subs = set()
        self.reminder_subs = set()

        self.client = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)

        self.load_subs()

        self.last_hour = None

        self.bg = None
        self._stop = True

    def load_subs(self):
        with open('subs.txt', 'r') as f:
            for sub in f.read().split('\n'):
                if sub:
                    self.subs.add(sub)
        log.info('Loaded subs: %s' % self.subs)
        with open('reminder_subs.txt', 'r') as f:
            for sub in f.read().split('\n'):
                if sub:
                    self.reminder_subs.add(sub)
        log.info('Loaded reminder subs: %s' % self.reminder_subs)

    def save_subs(self):
        with open('subs.txt', 'w') as f:
            f.write('\n'.join(self.subs) + '\n')
            f.close()

    def send_subs(self, who):
        what = []
        if who in self.subs:
            what.append('door activity')
        if who in self.reminder_subs:
            what.append('door open reminders')
        self.send_message(
            who,
            f'You are subscribed to {" and ".join(what)}'
        )

    def get_garage_status(self):
        top = GPIO.input(10)
        bottom = GPIO.input(11)
        if top == GPIO.HIGH:
            if bottom == GPIO.LOW:
                status = 'OPEN'
            else:
                status = 'ERROR (both open and closed?)'
        else:
            if bottom == GPIO.HIGH:
                status = 'CLOSED'
            else:
                status = 'PARTIALLY-OPEN'
        log.debug('....Door is %s' % status)
        return status

    def push_garage_button(self):
        log.info('Pushing garage button...')
        GPIO.output(7, True)
        time.sleep(.5)
        GPIO.output(7, False)
        log.info('Pushed garage button')

    def send_message(self, who, message):
        log.info(f"send_message {who} '{message}'")
        self.client.messages.create(body=message, from_=TWILIO_NUMBER, to=who)

    def receive_message(self, who, message):
        cmd = message.lower()
        log.info(f'{who}: {cmd}')

        if cmd == 'status' or cmd == 's':
            status = self.get_garage_status()
            msg = status
            if self.last_status_time:
                now = datetime.datetime(*time.localtime()[:6])
                delta = now - datetime.datetime(*self.last_status_time[:6])
                msg += " (since " + str(delta) + " ago)"
            self.send_message(who, msg)
            self.send_subs(who)

        elif cmd == 'push':
            self.push_garage_button()
        elif cmd == 'open' or cmd == 'o':
            if self.get_garage_status() != 'OPEN':
                self.push_garage_button()
        elif cmd == 'close' or cmd == 'c':
            if self.get_garage_status() != 'CLOSED':
                self.push_garage_button()

        elif cmd == 'sub':
            self.subs.add(who)
            self.reminder_subs.add(who)
            self.save_subs()
            self.send_subs(who)
        elif cmd == 'sub activity':
            self.subs.add(who)
            self.save_subs()
            self.send_subs(who)
        elif cmd == 'sub reminders':
            self.reminder_subs.add(who)
            self.save_subs()
            self.send_subs(who)

        elif cmd == 'unsub':
            if who in self.subs:
                self.subs.remove(who)
            if who in self.reminder_subs:
                self.reminder_subs.remove(who)
            self.save_subs()
            self.send_subs(who)
        elif cmd == 'unsub activity':
            if who in self.subs:
                self.subs.remove(who)
            self.save_subs()
            self.send_subs(who)
        elif cmd == 'unsub reminders':
            if who in self.reminder_subs:
                self.reminder_subs.remove(who)
            self.save_subs()
            self.send_subs(who)

        elif cmd == 'lssubs':
            self.send_message(
                who,
                f'Activity: {self.subs}\nReminders: {self.reminder_subs}'
            )
        elif cmd == 'whoami':
            self.send_message(
                who,
                'You are %s' % who
            )
            
    def do_main(self):
        log.info('main start')
        while not self._stop:
            status = self.get_garage_status()
            
            now = time.localtime()
            if self.last_hour:
                if (self.last_hour < REMINDER_HOUR and
                    now.tm_hour >= REMINDER_HOUR and
                    status != 'CLOSED'):
                    for sub in self.reminder_subs:
                        self.send_message(
                            sub,
                            'Reminder: door is ' + status
                        )
            self.last_hour = now.tm_hour

            if status != self.last_status:
                log.info('Garage door is now %s' % status)
                self.last_status = status
                self.last_status_time = now
                for sub in self.subs:
                    self.send_message(sub, status)

            time.sleep(1)
        log.info('main exit')

    def start(self):
        log.info('start')
        assert not self.bg
        assert self._stop
        self.bg = threading.Thread(target=doorpi.do_main, args=())
        self._stop = False
        self.bg.start()

    def stop(self):
        log.info('stop')
        assert not self._stop
        assert self.bg
        self._stop = True
        self.bg.join()
        self.bg = None


###########

doorpi = Doorpi()
app = Flask(__name__)

@app.route('/sms', methods=['POST'])
def inbound_sms():
    who = request.form['From']
    body = request.form['Body']
    doorpi.receive_message(who, body)
    response = MessagingResponse()
    return str(response)

def _get_parser():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        '-d', '--debug', action='store_true',
        help='log detailed debugging messages'
    )
    return parser

if __name__ == '__main__':
    log.info('main start')
    args = _get_parser().parse_args()
    logging.basicConfig(level=logging.DEBUG if args.debug else logging.INFO)

    doorpi.start()
    app.run(host='0.0.0.0', debug=True, use_reloader=False)
    doorpi.stop()

    log.info('main end')
